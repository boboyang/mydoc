grep "DEV_DEVENT\]" /var/log/signalingd.log |awk 'BEGIN{total=0}{total+=$9}END{print total}'
grep ":132," /var/log/syslog_cli.log |wc -l
grep ":132," /var/log/syslog_server.log |wc -l

ulimt -SHn 65536

#QA, tw
lancelot/mydlink  10.32.29.26
root/mydlink sigD(207.232.83.183) V1(207.232.83.185) V2(207.232.83.186) 

#fakeAgent
First, you should use genfakedevice.sh to generate fakedevice_us.sql. (./genfakedevice.sh 70000001 100000)

        Second, /usr/local/pgsql/bin/psql -U mydlink -d mydlink < fakedevice_us.sql

        Third, use fakeAgent to send the event (./fakeAgent 70000001 1000 1 207.232.83.183 443 8 1 > /dev/null )

http://www.balabit.com/sites/default/files/documents/syslog-ng-ose-3.3-guides/syslog-ng-ose-v3.3-guide-admin-en.html/index.html-single.html#concepts_losing_messages

16.1. Possible causes of losing log messages
When syslog-ng is sending messages: If syslog-ng cannot send messages to the destination and the output buffer gets full, syslog-ng will drop messages. The number of dropped messages is displayed per destination in the log message statistics of syslog-ng

The log_fifo_size() parameter sets the size of the output buffer. The output buffer must be larger than the log_fetch_limit() of the sources,


throttle()
Sets the maximum number of messages sent to the destination per second. Use this output-rate-limiting functionality only when using disk-buffer as well to avoid the risk of losing messages. Specifying 0 or a lower value sets the output limit to unlimited.

Figure 8.5. Handling outgoing messages in syslog-ng OSE
Disk buffer: If the output queue is full and disk-buffering is enabled, syslog-ng Premium Edition puts the outgoing messages into the disk buffer of the destination.

Overflow queue:  The log_fifo_size() parameter specifies the number of messages stored in the overflow queue. 

log_msg_size()
Type:	number
Default:	Use the global log_msg_size() option, which defaults to 8192.

sigD:
list.c
void *list_pop 
    if (difftime(time_now, entry->timestamp) > LIST_TIMESTAMP_LIMIT_HIGH) {
      list->overflow = TRUE;

https.c
push:  
  /*
   * Wake up corresponding thread.
   */
  err = list_push(list_type, base_index, entry_index, info,
                  (ssize_t)(sizeof(*info)));
  if (err == ERR_OVERFLOW) {
    DEBUG_NL(LOG_WARNING, "The request can't be processed from [%s].", info->mac);
    return(ERR_OVERFLOW);
  }


list.c

int list_push ()
{
  list->counter_push++;


void *list_pop ()
{...
    list->counter_pop++;

./signalingd 1000000
1000000 msgs, seconds: 808

grep ":132," /var/log/syslog_server.log |wc -l
978090
[root@ip-10-131-15-15 bsdc]# wc -l /var/log/syslog_server.log 
978090 /var/log/syslog_server.log


static int https_dispatch_app_data (HTTP_APP_DATA_T *info)
...
  err = list_push(list_type, base_index, entry_index, info,
                  (ssize_t)(sizeof(*info)));
  if (err == ERR_OVERFLOW) {
    DEBUG_NL(LOG_WARNING, "The request can't be processed from [%s].", info->mac);
    return(ERR_OVERFLOW);
  }
  
void *list_monitor_thread(void *param)
...
      DEBUG_RAW(LOG_NOTICE, "LIST[%12s]\tPUSH[%5d]\tPOP[%5d]\tLEN[%5d]", 

grep ":132," /var/log/syslog_cli_8k.log |wc -l
1718405
[root@sgqa bin]# cat count.txt | awk 'BEGIN{total=0}{total+=$2}END{print total}'
1734405

[1706381, 1708500, 258441]


1600 connect/disconnect

grep "overflow" /var/log/signalingd.log |wc -l
26292
grep " processed from" /var/log/signalingd.log |wc -l
2192


