Configurator:
    imperative:
        add_route()
        add_view()
    declarative:   
        @view_config(name='xx',request_method='xx')
        scan()
    make_wsgi_app():
        return a Router instance
    
create project:
    Scaffolds:
        starter:    URL mapping via URL dispatch and no persistence mechanism
        zodb:       URL mapping via traversal and persistence via ZODB.
        alchemy:    URL mapping via URL dispatch and persistence via SQLAlchemy
    create:
        pcreate -s alchemy mypyramid        
    install:
        python setup.py develop
        for alchemy db:
            initialize_mypyramid_db development.ini
    test:
        python setup.py test -q
    make tarball:
        python setup.py sdist    
    run:
        pserve development.ini
            :pserve starts the WSGI server defined within the [server:main] section
    reload: for developing
        #code changing make server restart automatically
        pserve development.ini --reload
    structure:
        develop.ini
            [app:main]
            use = egg:mypyramid
            ...
            [server:main]       # WSGI settings
            host = 
            port =
            ...
            [uwsgi]
            ...
        product.ini   
        setup.py
            requires=[...]  # packages needed to install
        mypyramid:
            __init__.py:
                main():
                    make a Configurator instance, config and returns a Pyramid WSGI application.
            views.py
                pattern:           
                    @view_config()
                    def xxx(request):   #a view callable
                        return Response 
                views folder: suplementation
                    __init__.py:    indicate views is a package
                    views.py
            static
            templates
            tests.py              
 
Request Processing:
    ref:http://docs.pylonsproject.org/projects/pyramid/en/1.3-branch/narr/router.html
    root_factory -> root(model) -> context(url) -> viewcallble(request) -> response
            
Url dispatch: Map urls to views, with pattern
    route config:
        match view:
            config.add_route(name, url)
            config.scan()
        pattern:
            foo/{baz}/{bar}
                                    
