Configurator:
    config = Configurator()
    imperative:
        config.add_route('route_name', urlpath)
        config.add_view(xxx. route_name='yyy')
    declarative:   
        @view_config(name='xx',request_method='xx')
        config.scan()
    make_wsgi_app():
        return a Router instance
    
create project:
    Scaffolds:
        starter:    URL mapping via URL dispatch and no persistence mechanism
        zodb:       URL mapping via traversal and persistence via ZODB.
        alchemy:    URL mapping via URL dispatch and persistence via SQLAlchemy
    create:
        pcreate -s alchemy mypyramid        
    install:
        python setup.py develop
        if model changed:
            initialize_mypyramid_db development.ini
    test:
        python setup.py test -q
    nosetest:
        nosetests --cover-package=tutorial --cover-erase --with-coverage
    make tarball:
        python setup.py sdist    
    run:
        pserve development.ini
            :pserve starts the WSGI server defined within the [server:main] section
    reload: for developing
        #code changing make server restart automatically
        pserve development.ini --reload
    debug-tool:
        Settings
        Performance: need enable
        Routes
    structure:
        develop.ini
            [app:main]
            use = egg:mypyramid
            #for mysql
            sqlalchemy.url = mysql://username:password@127.0.0.1/dbname?charset=utf8&use_unicode=0
            ...
            [server:main]       # WSGI settings
            host = 
            port =
            ...
            [uwsgi]
            ...
        product.ini   
        setup.py
            requires=[...]  # packages needed to install
            entry_points="""\
            [paste.app_factory]
            main = mypyramid:main
            [console_scripts]
            initialize_mypyramid_db = mypyramid.scripts.initializedb:main
            [paste.paster_command]
            ?
            """
        mypyramid:
            __init__.py:
                main():
                    make a Configurator instance, config and returns a Pyramid WSGI application.
            views.py
                pattern:           
                    @view_config()
                    def xxx(request):   #a view callable
                        return Response 
                views folder: suplementation
                    __init__.py:    indicate views is a package
                    views.py
            static
            templates
            tests.py              
 
Request Processing:
    ref:http://docs.pylonsproject.org/projects/pyramid/en/1.3-branch/narr/router.html
    root_factory -> root(model) -> resource(url) -> viewcallble(request) -> response
            
Url dispatch: Map urls to views, with pattern
    route config:
        match view:
            config.add_route(name, url)
            config.scan()
        pattern:
            foo/{baz}/{bar}
        matchdict:
            request.matchdict['baz']:
        query string:
            query_string = request.params.get('keyword',None)
        archor: location of a page
            #foo    
    request.route_url()
    sub route:
        def xxx(config):
            config.add_route()
        config.include(xxx, route_prefix='/yyy')
    route factory:
        config.add_route(..., factory='mypyramid.xxx.yyy')
    Security:
        ACL:    access control list
            self.__acl__ = [(Allow, 'bob', 'read'), (Deny, 'fred', 'write')]
        http://docs.pylonsproject.org/projects/pyramid/en/1.3-branch/narr/security.html#security-chapter
            
views:
    callables:
        as func:
        as class:
            class MyView(object):
                def __init__(self, request):
                    self.request = request
                def __call__(self):
                    return Response('hello')
    exceptions as response:
        HTTPUnauthorized()
        HTTPUnauthorized()
        from pyramid.httpexceptions import exception_response
        raise exception_response(401)
    redirect:
        return HTTPFound(location='http://example.com')    
    handle POST:
        use UTF-8 
        request.params['password']
        
Renderer:
    built-in:
        string
        json
            e.g.:@view_config(renderer='json')
    Varying Attributes:
        must return request.response
        e.g.:
            request.response.status = '404 Not Found'
            return {'URL':request.URL}  #implicit return request.response
            
Templates: to render dynamic data of view response
    direct use:
        return render_to_response('templates/foo.pt',
                              {'foo':1, 'bar':2},
                              request=request)
    via config:
        @view_config(renderer='templates/foo.pt')
        def xxx(request):
            ...
                                      
    System Values used by template:
        request(req)
        context
        renderer_name
        view                          
    mako:
        @view_config(renderer='foo.mak')
        ${foo}
    jinja2:
        paster create -t pyramid_jinja2_starter
               
@view_config:
    ref:http://docs.pylonsproject.org/projects/pyramid/en/1.3-branch/narr/viewconfig.html
    args:
        permission
        http_cache:
            =0                          # never cache
            =(3600, {'public':True})    # 1 hour, public cache control 
        name: travesal style
        route_name: url dispatch style
        request_method: (typically "GET", "POST", "PUT", "DELETE", or "HEAD")
        request_params:
            e.g. request_param="foo=123"
        accept
        header   
    @view_defaults:
        new in Pyramid 1.3. to decrate a class
         
Static Assets:
    config.add_static_view(name=, path=)
        name: a URL prefix
    override:
        config.override_asset(to_override=,override_with=)
    
session:
    enable session:
        default session factory:
            from pyramid.session import UnencryptedCookieSessionFactoryConfig
            my_session_factory = UnencryptedCookieSessionFactoryConfig('itsasecret')
            config = Configurator(session_factory = my_session_factory)
        alternative session factory:
             pyramid_beaker
    Using a Session Object:
        request.session: use like a dict
        Extra attributes:
            created()
            invalidate()
    Flash Messages:
        a queue of messges stored in session
        apply:
            to display a status message only once to the user  
        use:
            reques.session
                .flash('xxx')
                .pop_flash()
    Preventing Cross-Site Request Forgery Attacks:
        token = request.session.get_csrf_token()
        if token != request.POST['csrf_token']:
            raise ValueError('CSRF token did not match')
        # invalidate
        token = request.session.new_csrf_token()
                    
Events:
    an event is an object broadcast by the Pyramid framework at interesting points during the lifetime of an application.
    
cmd line:
    pviews development.ini PATH
    pshell development.ini#main   [app:main] in .ini
        registry.settings
        Ctrl+D: exit
    proutes development.ini : display all routes
    prequest:
        prequest development.ini#section_name PATH: send request    # default section_name is main, can be amit
        -d: --display-headers
        -mPOST < somefile    
        curl -d "a=1&b=2" 'http://localhost:6543/test/post' 
    Writing a Script:
        from pyramid.paster import bootstrap
        env = bootstrap('development.ini')
        print env['request'].route_url('home')
        clear up:
            env['closer']()

Virtual Hosting:
     serving an application under a URL “prefix”.
     e.g. in .ini:
        [app:mypyramidapp]
        use = egg:mypyramidapp
        [composite:main]
        use = egg:Paste#urlmap
        /pyramidapp = mypyramidapp
        
unittest:
    import unittest
    from pyramid import testing
    class MyTest(unittest.TestCase):
        setUp()
        tearDown()
        self.config.testing_securitypolicy()
        request = testing.DummyRequest()
        request.context = testing.DummyResource()
        
security:
    request -> view lookup -> security -> view
    concepts:
        authentication: who
        authorization:  permission or forbidden
    enable:
        from pyramid.config import Configurator
        from pyramid.authentication import AuthTktAuthenticationPolicy
        from pyramid.authorization import ACLAuthorizationPolicy
        authentication_policy = AuthTktAuthenticationPolicy('asecret')  
        authorization_policy = ACLAuthorizationPolicy()
        config = Configurator()
        config.set_authentication_policy(authentication_policy)
        config.set_authorization_policy(authorization_policy)
    use:
        view_config(...,permission='add')
        config.set_default_permission() 
    assign ACL to resource objs:
        from pyramid.security import Everyone,Allow
        class Blog(object):
            __acl__ = [
                (Allow, Everyone, 'view'),
                (Allow, 'group:editors', 'add'),
                (Allow, 'group:editors', 'edit'),
                ]
    
Configuration Introspection:
    ref:
        http://docs.pylonsproject.org/projects/pyramid/en/1.3-branch/narr/introspector.html
    e.g.:
        introspector = request.registry.introspector
        route_intr = introspector.get('routes', route_name)     
        return Response(str(route_intr['pattern']))
    category:
        routes:
            name,pattern,factory,...
            
app extending:
    extend view:
        from originalapp import some_views
        config.include(some_views)
    override assets:
        http://docs.pylonsproject.org/projects/pyramid/en/1.3-branch/narr/assets.html#overriding-assets-section
        
Add-Ons:
    href:http://docs.pylonsproject.org/en/latest/docs/pyramid.html#pyramid-add-on-documentation
    install: pip install xxx
    setup:
        setup.py:
            requires = [...'xxx']
        __init__.py:    
            config.include('xxx')
    pyramid_beaker:
        href:   http://beaker.readthedocs.org/en/latest/configuration.html
        .ini:
            [app:myapp]
            session.type = ext:memcached
            session.url = 127.0.0.1:11211
            session.lock_dir = %(here)s/sessions/lock
        __init__.py:
            from pyramid_beaker import session_factory_from_settings
            session_factory = session_factory_from_settings(settings)
            config.set_session_factory(session_factory)
    pyramid_mailer:
        Attachments: http://pyramid_mailer.readthedocs.org/en/latest/#attachments
    pyramid_jinja2:
        jinja2.directories = myparamid:templates
            
     
