next task:
aim:minimize the change in signalingd and send the event/logs via the syslog mechanism. 
devcie <====> signalingd <====> syslogd-ng <====> mongodb <====> Nexus/NoSQL


supervisor: TY Lin
consultor:  Brian in SIRCD

PACKAGE_ARGS="-d 5 -h 0.0.0.0 -H 80 -S 443 -m c.c.c.c:11211 -q b.b.b.b -t 10 -n 400 -r XX -s XX -i N"
b.b.b.b 為 AWS DB 主機的 Private IP 或是 IDC DB 主機的 Public IP 
XX 為 Site 名稱，目前有 MP, MP(TW), MP(CN), MP(SG), MP(EU), QA(TW), QA(CN), QA(U2), QA(U3), RD(V4), RD(V2) 等
N 為數字，表示此主機為第 N 台 signalingd server
例：signal1.us.mydlink.com  N 設定為 1
signal2.us.mydlink.com  N 設定為 2
新增 DNS record【 signal.xx.mydlink.com，xx 為各 site 代號 】


下面是一个syslog消息：
<30>Oct 9 22:33:20 hlfedora auditd[1787]: The audit daemon is exiting.
其中“<30>”是PRI部分，“Oct 9 22:33:20 hlfedora”是HEADER部分，
“auditd[1787]: The audit daemon is exiting.”是MSG部分。
MSG部分又分为两个部分，TAG和Content。其中TAG部分是可选的。
TAG后面用一个冒号隔开Content部分，这部分的内容是应用程序自定义的。

#wiki
<22>2012-01-11T22:14:15.003Z 10.32.192.1 signalingd[19283]:Event; devMac='F07D68022D93', mdId='30038291', evtType='0x0201'
<31>2012-01-11T22:14:17.025Z 10.32.192.1 signalingd[19283]:Invalid Msg; devMac='F07D68022D01'
When signalingd receives the event report from the device, all the fields in the report shall be listed at the end of the log.
<22>2012-01-11T22:14:15.076Z 10.32.192.1 signalingd[19283]:Event; devMac='F07D68022D93', mdId='30038291', evtType='0x0400', mac='F81EDFDC29DB', ip='192.168.0.110', name='Lenovo X201' 


1、安裝 libevent
# cd /root/Server_Source-2.1
# tar xvzf libevent-1.4.13-stable.tar.gz
# cd libevent-1.4.13-stable
# ./configure && make && make install
# cd ..
2、安裝 memcached
# tar xvzf memcached-1.4.4.tar.gz
# cd memcached-1.4.4
# ./configure && make && make install
# cd ..
3、安裝 libmemcached
# tar xvzf libmemcached-0.35.tar.gz
# cd libmemcached-0.35
# ./configure --with-memcached && make && make install
# cd ..
4、安裝 eventlog
tar xvzf eventlog_0.2.12.tar.gz
cd eventlog-0.2.12cd
./configure && make && make install
# cd ..
5、安裝 syslog-ng
# tar xvzf syslog-ng_3.0.5.tar.gz
# cd syslog-ng-3.0.5
# ./configure && make && make install
# cd ..
# mkdir /usr/local/var
# cp config_release/syslog-ng.conf /usr/local/etc/syslog-ng.conf

#init.d
sudo cp contrib/init.d.RedHat /etc/init.d/syslog-ng

netstat -ntulp
#modify .conf
kill -1 syslog-ng   #restart

syslog-ng V 3.3.3 doc:

11.1.2. Templates and macros

template(): a format to record logfile, like "$ISODATE $HOST $MSG\n"


using the "${MSG}" format is recommended for clarity.

the following macro can specify a default hostname:
${HOST:-default_hostname}

By default, syslog-ng sends messages using the following template: $ISODATE $HOST $MSGHDR$MSG\n.

S_DATE  : when the message was sent by the original application. 
R_DATE  : the date when syslog has received the message.


$(grep condition value-to-select)
ex:
$(grep ("${username}" == "root") ${auth_method})

11.1.5. Using template functions
$(echo $(echo $HOST))

Example 11.2. Using SDATA macros
For example, if a log message contains the following structured data: [exampleSDID@0 iut="3" eventSource="Application" eventID="1011"][examplePriority@0 class="high"] you can use macros like: ${.SDATA.exampleSDID@0.eventSource} — this would return the Application string in this case.

11.3.2. Optimizing regular expressions
kind of condition
ex:
filter f_demo_optimized_regexp {
    program("demo_program") and
    match("time error") and 
    match("is too large") and 
    match("set clock manually"); };


Chapter 12. Parsing and segmenting structured messages

12.1. Parsing messages
Declaration:
    parser parser_name {
    csv-parser(column1, column2, ...)
    delimiters()
    flags()
    quote-pairs()
    };

flags() Synopsis:	
drop-invalid, escape-none, escape-backslash, escape-double-char, greedy, strip-whitespace

parser DLINK_seg {
    csv-parser(columns("DLINK_LOGTYPE", "TLVs")
    delimiters(";")
    flags(strip-whitespace)
    );
};

parser TLV_seg {
    csv-parser(columns("TLVs.MAC", "TLVs.DLINK_ID")
    delimiters(",")
    flags(escape-double-char, strip-whitespace)
    template("${TLVs}")
    );
};

destination d_signalingd_mongodb3 {
    mongodb(
       host("172.18.195.151")
           port(27017)
           database("signalingd")
           collection("pardata")
           value-pairs(
               pair("DLINK_LOG_TYPE", "${DLINK_LOGTYPE}")
               pair("MAC", "${TLVs.MAC}")
               pair("DLINK_ID", "${TLVs.DLINK_ID}")
           )
    );
};


log {
        #source(s_sys); 
        source(s_network);
        filter(f_signalingd);
        parser(DLINK_seg); parser(TLV_seg); destination(d_signalingd_mongodb3);

};


2nd phase parse:

ex: apache log 
"%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %T %v"

parser p_apache {
    csv-parser(columns("APACHE.CLIENT_IP", "APACHE.IDENT_NAME", "APACHE.USER_NAME",
        "APACHE.TIMESTAMP", "APACHE.REQUEST_URL", "APACHE.REQUEST_STATUS",
        "APACHE.CONTENT_LENGTH", "APACHE.REFERER", "APACHE.USER_AGENT",
        "APACHE.PROCESS_TIME", "APACHE.SERVER_NAME")
         flags(escape-double-char,strip-whitespace)
         delimiters(" ")
         quote-pairs('""[]')
         );
};

parser p_apache_timestamp {
    csv-parser(columns("APACHE.TIMESTAMP.DAY", "APACHE.TIMESTAMP.MONTH", "APACHE.TIMESTAMP.YEAR", "APACHE.TIMESTAMP.HOUR", "APACHE.TIMESTAMP.MIN", "APACHE.TIMESTAMP.MIN", "APACHE.TIMESTAMP.ZONE")
    delimiters("/: ")
    flags(escape-none)
    template("${APACHE.TIMESTAMP}"));
    };
    
log { source(s_local);
    log { 
        parser(p_apache); parser(p_apache_timestamp); destination(d_file);
    };
};

---------------------
quote-pairs()
Delimiter characters enclosed between quote characters are ignored.

value-pairs ->$(format-json parameters), or directly used by mongodb

mongodb();
value-pairs {
    ...
    pair("<NAME>" "<VALUE>")
}

<VALUE> can include macros, templates, and template functions
macros: built-in or user-defined macro.


