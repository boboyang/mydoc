#get help
:help [txt]
Ctrl-w Ctrl-w       #jump to next window
:q                  #quit help


#move cursor
h j k l
< v ^ >
w           #move a word
e           #move to end of a word
[num]w/e    #move [num] words
Ctrl-g      #show current line position
[num]g      #goto line [num]
G           #goto EOF
gg          #goto start of file

Shift-Up    #page up
Shift-Down  #page down

#exiting
:q
:q!
:wq

#undo/redo editing
[num]u
[num]Ctrl-r
U       #return the line to orginal state

#edit
#delete
:help x
[num]x  #del chars

d[num]w/e      #del [num] word
d[num]d        #del num lines
d$             #del to $
d^

#replace
r   #replace a word
R   

#change 
c[num]e  #cha[num]ge to end of a word
c$

#append
a
A   #append at $

#iunsert
i
I   #insert at ^

o   #open a line to insert
O   #open a line above

#copy/paste
v   #visual selection
y   #copy
p   #paste prvious del text

#search
/   #search forward
?   #search backward
n   #next

#subtitute
:s/old/new/g        #first occur
:#,#s/old/new/g     #between line #,#
:%s/old/new/g       #whole file
:%s/old/new/gc      #whole file with confirm

#execute external cmd
:![cmd]
:w [filename]
:r [filename]   #insert file contents

:[cmd][Ctrl-d][Tab] #cmd completion

:e ~/.vimrc
:r $VIMRUNTIME/vimrc_example.vim
:wq

#~/.vimrc
set sta
set number
set smartindent
set tabstop=4
set shiftwidth=4

#Taglist
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1

%   #goto matching of ),],}
gD  #goto loc var def
[[ 转到上一个位于第一列的“{”
]] 转到下一个位于第一列的“{”
{   转到上一个空行
}   转到下一个空行
''	跳转到光标上次停靠的地方, 是两个', 而不是一个"
mx	设置书签,x只能是a-z的26个字母
`x	跳转到书签处("`"是1左边的键)
>	增加缩进,"x>"表示增加以下x行的缩进
<	减少缩进,"x<"表示减少以下x行的缩进

#ctags    
#src
ctags -R        #create index
vim -t foo_bar  #open file and goto def of foo_bar
:ta foo_bar     #goto def of foo_bar
Ctrl-]          #goto def 
Ctrl-t          #go back

为了不让__THROW干扰ctags，需要在运行ctags时使用-I选项。我一般使用下面的命令生成系统头文件tags

ctags -I __THROW --file-scope=yes --langmap=c:+.h --languages=c,c++ --links=yes --c-kinds=+p -R -f ~/.vim/systags /usr/include /usr/local/include

其关键是-I __THROW部分和--c-kinds=+p部分。设置-I后，ctags会在处理文件时，就会忽略-I后面写出来的符号。而--c-kinds=+p则告诉ctags需要为函数原型的声明也生成tag。--langmap=c:+.h表示.h视为c文件而不是c++文件。

最后，设置你的~/.vimrc，加入一行：
set tags+=~/.vim/systags
就可以享受系统库函数名补全、原型预览等功能了。

:Tlist
#click and [ENTER]
#click and [SPACE]

#winmanager
http://www.vim.org/scripts/script.php?script_id=95
depend on bufexplorer.vim. (vimscript #42). 

#~/.vimrc
let g:winManagerWindowLayout='FileExplorer|TagList'
nmap wm :WMToggle<cr>
#wm will togle layout show/hide

#cscope
sudo apt-get install cscope
#~/.vimrc
set cscopequickfix=s-,c-,d-,i-,t-,e-
# src
cscope -Rbq

#quickfix, already installed
:make
:cw

#fold
#~/.vimrc
set foldmethod=syntax
set foldlevel=100  " 启动vim时不要自动折叠代码
za
zM
zR

:set mouse=     # copy enabled
:set mouse=a    #mouse active, could not copy

---------------------------
#vimgdb install



[F7]
[SPACE]     # jump to gdb
file [filename]
[CTRL-B]    #add bp at cursor
b [line]    # add bp at [line]
clear [line]
[CTRL-E]    #clear bp
[CTRL-N]    #next 
r   #run
c   #continue
s   #step
:bel 20vsplit gdb-variables 
createvar [var]
p *[pvar]   #show cotents of *pvar

frame
[CTRL-U]    #up frame
[CTRL-D]    #down frame

frame [num]
info locals

 (gdb) quit – exit the debugger
 (gdb) file – load an executable file
 (gdb) break line-number/function name -- Set a break-point on a line/at start of function
 (gdb) run <args> -- start running the program; if there are command-line arguments, put them after the run invocation
 (gdb) cont -- continue running, after a break
 (gdb) next -- Next program line (step over function calls)
 (gdb) step -- Step into function calls.
 (gdb) finish - Step out of the present function
 (gdb) print expression -- Show value of a variable or expression
 (gdb) list – List 10 lines of the program being debugged. The sixth line is the preset statement. Subsequent, consecutive entry of list will list the next 10 lines.
 (gdb) where – obtain a backtrace showing all function calls before the current statement
 (gdb) up – Move to the function that called the present function. Useful if your program crashes in a library function; use up to get to the last function call in your program
 (gdb) down – Reverses the action of up
 (gdb) delete – Removes breakpoint by number (see example following). If no number, all deleted.
 (gdb) kill – Terminates the program.

#marks
ma	 set mark a at current cursor location
'a	 jump to line of mark a (first non-blank character in line)
`a	 jump to position (line and column) of mark a
d'a	 delete from current line to line of mark a
d`a	 delete from current cursor position to position of mark a
c'a	 change text from current line to line of mark a
y`a	 yank text to unnamed buffer from cursor to position of mark a
:marks	 list all the current marks
:marks aB	 list marks a, B

#grep
[F3], then set txt



