
%!Target : html
%!encoding: utf-8
%!options: --toc --toc-level 2 --css-sugar

+ Intro +
| def | ( Python) Web Server Gateway Interface 
| ref | http://www.python.org/dev/peps/pep-3333/ |

components:
    app
    container
    middleware
    
+Specification+[spec]
| splited  to server/app |

- server/gateway
```
def run_with_cgi(application):
    environ = dict(os.environ.items())
    ... # modify environ
    def write(data):    # stdout http response
        ...
    # deal with headers    
    def start_response(status, response_headers, exc_info=None):
        ...
        return write
    result = app(environ, start_response)
    #deal with body
    for data in result:
        write(data)
```
- app/framework
```
#function method
def app(environ, start_response):
    status = '200 OK'
    # a list of (header_name, header_value) tuples, name are case-insensitive 
    response_headers = [('Content-type', 'text/plain')]
    start_response(status, response_headers)
    return ['Hello world!\n']

# class method
class AppClass
def __init__(self, environ, start_response):
        self.environ = environ
        self.start = start_response

    def __iter__(self):
        status = '200 OK'
        response_headers = [('Content-type', 'text/plain')]
        self.start(status, response_headers)
        yield 'Hello world!\n'
        
```    
- middleware
def: 
    between server and app, do pre and pro processing
usage:
    - authentication
    - logging
    - redirect url
    - allow multi-app in same process 
    - load balance 
    - content postprocessing 
a middleware component must yield at least one value each time its underlying application yields a value.
            
+ environ +[env]

| REQUEST_METHOD |
| SCRIPT_NAME | URL's "path" that corresponds to the application object, so that the application knows its virtual "location".
| PATH_INFO 
| QUERY_STRING
| CONTENT_TYPE
| CONTENT_LENGTH 
| SERVER_NAME/SERVER_PORT
| SERVER_PROTOCOL | "HTTP/1.0" or "HTTP/1.1" |

+ start_response +
start_response can be called more than once, but with exc_info if again. This is to ensure that buffered and asynchronous applications can replace their originally intended output with error output, up until the last possible moment.

+ error handling +
```
try:
    status = "200 Froody"
    response_headers = [("content-type", "text/plain")]
    start_response(status, response_headers)
    ...
    return ["normal body goes here"]
except:
    # XXX should trap runtime issues like MemoryError, KeyboardInterrupt
    #     in a separate handler before this bare 'except:'...
    status = "500 Oops"
    response_headers = [("content-type", "text/plain")]
    start_response(status, response_headers, sys.exc_info())
    return ["error body goes here"]
```    

+uwsgi+[uwsgi]
    a binary protocol used by the uWSGI server.
    The first 4 bytes of a uwsgi packet describe the type of information.
    Every uwsgi request generates an uwsgi response. 
----------------------------------------
http://whille.gicp.net

