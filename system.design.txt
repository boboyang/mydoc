
Online Server design：
    1) scale-up， 单机高性能，也就是所谓的c10k能力。
    2) scale-out，良好的scalability。简单来说，就是加机器可以提升系统性能。
    3) 稳定输出（sustained throughput）。在峰值压力情况下，平滑过渡，避免雪崩效应。
        症状：
            普通模型到达性能瓶颈后，开始堆积请求（可能在web server，也可能在请求队列，不过通常不会在CDN），吞吐急剧下降，延迟急剧上升，而随着堆积请求越多，情况越糟，引起雪崩效应。
        对策: 
            分级队列、请求调度、延迟截断、主动拒绝等等
    4) 良好的自管理自运维能力，在故障、升级或扩容时尽量减少人工介入。


延迟VS吞吐、公平VS效率：
    Desktop:
        低延迟和公平。
        同步, 线程(池）。
    Server：    
        高吞吐（或稳定的极限吞吐）和高效率。
        异步，事件驱动、队列

在系统的每一层中，都可能存在一些重复的功能。以存储为例，一次写入需要经历从libc的文件流（FILE stream），到文件系统的缓冲区，再到驱动器中的缓冲区，最后到磁盘上的缓存这样的长调用流程才能完成持久化（persistency）。这个流程从其中的每一层单独来看都是合理的，但从整个系统的角度看来，存在着性能浪费。另外，由于分层带来的透明性使得数据持久化不得不通过额外的fsync操作才得以保证，从而使系统的可靠性保证机制变得更复杂。

以SSD为例，现在的SSD在设计时通常假设由文件系统来使用。SSD的逻辑其实可以做得非常简单，直接对上层暴露内部的状态（如通路、物理块），从而提高性能、降低成本。更重要的是，这将有效提高交付速度——这对于缓解服务器、网络、IDC等硬件系统的长实施周期和业务快速增长的规模需求之间的矛盾至关重要。







